<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SYNXROFORM</title>
    <link>/</link>
    <description>Recent content on SYNXROFORM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <copyright>Zaika Denis</copyright>
    <lastBuildDate>Tue, 25 Feb 2020 01:26:10 +0300</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Random Geodesic</title>
      <link>/posts/random-geodesic/</link>
      <pubDate>Tue, 25 Feb 2020 01:26:10 +0300</pubDate>
      
      <guid>/posts/random-geodesic/</guid>
      <description>Ортогональный дизайн плотно укоренился во многих сферах человеческой жизни. Я думаю, не будет преувеличением сказать, что большинство людей, размышляя о доме своей мечты представляют его как совокупность ортогональных элементов. Такой выбор обусловлен отнюдь не эстетическими качествами прямоугольников и кубов. Заточенность производства конструктивных элементов на однообразные повторяющиеся операции, делает невозможным осуществление криволинейных архитектурных форм, по крайней мере в области типового строительства. Сложность инженерных расчетов и последующего контроля строительства оболочек двойной кривизны, также сильно ограничивают область применения данного типа конструкций.</description>
    </item>
    
    <item>
      <title>Herzog Continued</title>
      <link>/posts/herzog-continued/</link>
      <pubDate>Thu, 14 Nov 2019 21:36:14 +0300</pubDate>
      
      <guid>/posts/herzog-continued/</guid>
      <description>Некоторое время назад я публиковал видео в котором был подробно показан алгоритм построения фасада торгового центра Messe Basel от архитектурного бюро Herzog de Meuron. Данный алгоритм содержит несколько недостатков. Во первых, он использует функции из модуля ICEM, который в большинстве случаев недоступен архитектурным бюро, проектирующим в Digital Project вместо CATIA. Во вторых, метод построения волнообразных элементов, основанный на касательных к управляющей поверхности, в результате даёт криволинейные развёртки усложняющие раскрой материала. Новую версию алгоритма мы разберём на примере фасада лаборатории медицинского университета города Гронинген, спроектированного архитектурным бюро UNSTUDIO.</description>
    </item>
    
    <item>
      <title>Random Modules</title>
      <link>/posts/random-modules/</link>
      <pubDate>Wed, 06 Nov 2019 21:30:30 +0300</pubDate>
      
      <guid>/posts/random-modules/</guid>
      <description>Вот уже несколько тысячелетий, создавая своё окружение, человечество, в той или иной степени, неизменно следует принципам модульного проектирования. И хотя, современные технологии, позволяют создавать свободные формы, большинство дизайнеров, исходя из экономических соображений, вынуждены применять в своих разработках модульное деление. Но простое многократное копирование в редких случаях приводит к хорошему внешнему виду. О важности вариаций прекрасно знают дизайнеры, которым приходилось выбирать плиточный материал для больших поверхностей. При неправильно составленном модуле, в глазах начинает &amp;ldquo;рябить&amp;rdquo;, и длительное прибывание в таком помещении у большинства вызывает чувство дискомфорта.</description>
    </item>
    
    <item>
      <title>Apollonian Gasket</title>
      <link>/posts/apollonian-gasket/</link>
      <pubDate>Fri, 25 Oct 2019 21:12:05 +0400</pubDate>
      
      <guid>/posts/apollonian-gasket/</guid>
      <description>Фракталы представляют собой довольно обширный класс математических объектов. Единственным условием характеризующим некоторую функцию как фрактальную является её самоподобие. Любой рекурсивный алгоритм осуществляющий замещение некоторой локальной области геометрии её инверсией можно назвать фрактальным. Еще одной особенностью фракталов является отсутствие сходимости, этим они отличаются от сглаживающих рекурсивных функций таких как алгоритм Чайкина.
На сегодняшний день сообществом математиков построено большое количество красивых и сложных фракталов. Иногда фракталы находят своё применение в архитектуре, но в связи с тем, что строения и без того являются сложными объектами, архитекторы не спешат их использовать.</description>
    </item>
    
    <item>
      <title>Go With Reflection</title>
      <link>/posts/go-with-reflection/</link>
      <pubDate>Thu, 10 Oct 2019 11:23:56 +0400</pubDate>
      
      <guid>/posts/go-with-reflection/</guid>
      <description>Системы типов в таких языках как C/C++ основаны на структурном представлении объекта в памяти. В противоположность этому алгебраические системы типов основаны на операциях применяемых к конкретному объекту. Определение типа происходит в двух местах : во время объявления переменной, и в заголовке функции. Создавая новую переменную компилятор должен знать о структуре выделяемой памяти, но есть ли необходимость в информации о структуре объекта во время определения функции. Как показывает практика применения языков с алгебраической типизацией, такой необходимости нет.</description>
    </item>
    
    <item>
      <title>J-Grass Points</title>
      <link>/posts/ju-grass-points/</link>
      <pubDate>Tue, 01 Oct 2019 18:54:40 +0400</pubDate>
      
      <guid>/posts/ju-grass-points/</guid>
      <description>Всё большую популярность в среде архитекторов и дизайнеров приобретают системы визуального программирования. Берущие своё начало от языков моделирования потоков данных, визуальные блоки позволяют решать задачи в терминах устройств, непрерывно преобразующих поступающую информацию. Такой подход к программированию является доминирующим в системах цифровой обработки сигналов, физического моделирования, анимации, визуализации. Сегодня довольно сложно найти программу трёхмерного моделирования или анимации, которая не позволяла бы писать скрипты в виде графов. Но несмотря на популярность визуального программирования, давайте всё же рассмотрим возможности и ограничения, которые могут возникнуть в ходе решения задач.</description>
    </item>
    
    <item>
      <title>Objects and Methods</title>
      <link>/posts/objects-and-methods/</link>
      <pubDate>Sun, 22 Sep 2019 08:01:41 +0400</pubDate>
      
      <guid>/posts/objects-and-methods/</guid>
      <description>Семейство императивных языков программирования демонстрирует удивительное многообразие. И хотя на первый взгляд может показаться, что различий между отдельными представителями не существует, разработчики новых языков всё же находят основания для того, чтобы называть свой продукт следующей ступенью в развитии семейства. Мы, в свою очередь, попробуем выделить рациональные основания такого многообразия, которые не всегда гарантируют расширение общей парадигмы, предлагая вместо этого субъективное ощущение упорядоченности.
Валентин Фёдорович Турчин - разработчик языка Refal, в своих работах часто оперирует понятием метасистемного перехода - удобным инструментом для анализа развития кибернетических моделей, позволяющим определять необходимые условия для расширения базовой сущности.</description>
    </item>
    
    <item>
      <title>Give Me More</title>
      <link>/posts/give-me-more/</link>
      <pubDate>Sat, 21 Sep 2019 23:09:04 +0400</pubDate>
      
      <guid>/posts/give-me-more/</guid>
      <description>Несмотря на то, что для сравнения производительности Julia и Fortran, было проведено достаточно тестов, многие программисты (в том числе и я), имеющие опыт работы с Fortran или Matlab, всё ещё пытаются понять парадигму Julia, которой нужно придерживаться для достижения максимальной производительности. Дело в том, что язык допускает различные стили программирования, но не все они являются оптимальными. В этой статье я расскажу, как я пытался программировать в стиле Numpy, а в результате выбрал стиль Fortran.</description>
    </item>
    
  </channel>
</rss>